"use strict";(globalThis.webpackChunkbike_bus=globalThis.webpackChunkbike_bus||[]).push([[965],{1965:(e,t,n)=>{n.r(t),n.d(t,{FirebaseAuthenticationWeb:()=>a});var r=n(6653),i=n(8434),s=n(773);class a extends r.Uw{constructor(){super(),this.lastConfirmationResult=new Map;(0,i.v0)().onAuthStateChanged((e=>this.handleAuthStateChange(e)))}async applyActionCode(e){const t=(0,i.v0)();return(0,i.iA)(t,e.oobCode)}async createUserWithEmailAndPassword(e){const t=(0,i.v0)(),n=await(0,i.Xb)(t,e.email,e.password);return this.createSignInResult(n,null)}async confirmPasswordReset(e){const t=(0,i.v0)();return(0,i.LG)(t,e.oobCode,e.newPassword)}async confirmVerificationCode(e){const{verificationCode:t,verificationId:n}=e,r=this.lastConfirmationResult.get(n);if(!r)throw new Error(a.ERROR_CONFIRMATION_RESULT_MISSING);const i=await r.confirm(t);return this.createSignInResult(i,null)}async deleteUser(){const e=(0,i.v0)().currentUser;if(!e)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.h8)(e)}async getCurrentUser(){const e=(0,i.v0)();return{user:this.createUserResult(e.currentUser)}}async getIdToken(e){const t=(0,i.v0)();if(!t.currentUser)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return{token:await t.currentUser.getIdToken(null===e||void 0===e?void 0:e.forceRefresh)||""}}async getRedirectResult(){const e=(0,i.v0)(),t=await(0,i.cx)(e),n=t?i.O4.credentialFromResult(t):null;return this.createSignInResult(t,n)}async getTenantId(){return{tenantId:(0,i.v0)().tenantId}}async isSignInWithEmailLink(e){const t=(0,i.v0)();return{isSignInWithEmailLink:(0,i.JB)(t,e.emailLink)}}async linkWithApple(e){const t=new i.O4(s.F.APPLE);this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithEmailAndPassword(e){const t=i.w9.credential(e.email,e.password),n=await this.linkCurrentUserWithCredential(t);return this.createSignInResult(n,t)}async linkWithEmailLink(e){const t=i.w9.credentialWithLink(e.email,e.emailLink),n=await this.linkCurrentUserWithCredential(t);return this.createSignInResult(n,t)}async linkWithFacebook(e){const t=new i._O;this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i._O.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithGameCenter(){throw new Error("Not available on web.")}async linkWithGithub(e){const t=new i.GH;this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.GH.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithGoogle(e){const t=new i.hJ;this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.hJ.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithMicrosoft(e){const t=new i.O4(s.F.MICROSOFT);this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithPhoneNumber(e){const t=(0,i.v0)().currentUser;if(!t)throw new Error(a.ERROR_NO_USER_SIGNED_IN);if(!e.phoneNumber)throw new Error(a.ERROR_PHONE_NUMBER_MISSING);if(!e.recaptchaVerifier||!(e.recaptchaVerifier instanceof i.lI))throw new Error(a.ERROR_RECAPTCHA_VERIFIER_MISSING);try{const n=await(0,i.L6)(t,e.phoneNumber,e.recaptchaVerifier),{verificationId:r}=n;this.lastConfirmationResult.set(r,n);const s={verificationId:r};this.notifyListeners(a.PHONE_CODE_SENT_EVENT,s)}catch(n){const e={message:this.getErrorMessage(n)};this.notifyListeners(a.PHONE_VERIFICATION_FAILED_EVENT,e)}}async linkWithPlayGames(){throw new Error("Not available on web.")}async linkWithTwitter(e){const t=new i.c4;this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.c4.credentialFromResult(n);return this.createSignInResult(n,r)}async linkWithYahoo(e){const t=new i.O4(s.F.YAHOO);this.applySignInOptions(e||{},t);const n=await this.linkCurrentUserWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async reload(){const e=(0,i.v0)().currentUser;if(!e)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.H5)(e)}async sendEmailVerification(){const e=(0,i.v0)().currentUser;if(!e)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.w$)(e)}async sendPasswordResetEmail(e){const t=(0,i.v0)();return(0,i.LS)(t,e.email)}async sendSignInLinkToEmail(e){const t=(0,i.v0)();return(0,i.oo)(t,e.email,e.actionCodeSettings)}async setLanguageCode(e){(0,i.v0)().languageCode=e.languageCode}async setPersistence(e){const t=(0,i.v0)();switch(e.persistence){case s.n.BrowserLocal:await(0,i.Fb)(t,i.a$);break;case s.n.BrowserSession:await(0,i.Fb)(t,i.aT);break;case s.n.IndexedDbLocal:await(0,i.Fb)(t,i.AP);break;case s.n.InMemory:await(0,i.Fb)(t,i.BV)}}async setTenantId(e){(0,i.v0)().tenantId=e.tenantId}async signInAnonymously(){const e=(0,i.v0)(),t=await(0,i.XB)(e);return this.createSignInResult(t,null)}async signInWithApple(e){const t=new i.O4(s.F.APPLE);this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithCustomToken(e){const t=(0,i.v0)(),n=await(0,i._p)(t,e.token);return this.createSignInResult(n,null)}async signInWithEmailAndPassword(e){const t=(0,i.v0)(),n=await(0,i.e5)(t,e.email,e.password);return this.createSignInResult(n,null)}async signInWithEmailLink(e){const t=(0,i.v0)(),n=await(0,i.P6)(t,e.email,e.emailLink);return this.createSignInResult(n,null)}async signInWithFacebook(e){const t=new i._O;this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i._O.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithGithub(e){const t=new i.GH;this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.GH.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithGoogle(e){const t=new i.hJ;this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.hJ.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithMicrosoft(e){const t=new i.O4(s.F.MICROSOFT);this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithPhoneNumber(e){if(!e.phoneNumber)throw new Error(a.ERROR_PHONE_NUMBER_MISSING);if(!e.recaptchaVerifier||!(e.recaptchaVerifier instanceof i.lI))throw new Error(a.ERROR_RECAPTCHA_VERIFIER_MISSING);const t=(0,i.v0)();try{const n=await(0,i.$g)(t,e.phoneNumber,e.recaptchaVerifier),{verificationId:r}=n;this.lastConfirmationResult.set(r,n);const s={verificationId:r};this.notifyListeners(a.PHONE_CODE_SENT_EVENT,s)}catch(n){const e={message:this.getErrorMessage(n)};this.notifyListeners(a.PHONE_VERIFICATION_FAILED_EVENT,e)}}async signInWithPlayGames(){throw new Error("Not available on web.")}async signInWithGameCenter(){throw new Error("Not available on web.")}async signInWithTwitter(e){const t=new i.c4;this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.c4.credentialFromResult(n);return this.createSignInResult(n,r)}async signInWithYahoo(e){const t=new i.O4(s.F.YAHOO);this.applySignInOptions(e||{},t);const n=await this.signInWithPopupOrRedirect(t,null===e||void 0===e?void 0:e.mode),r=i.O4.credentialFromResult(n);return this.createSignInResult(n,r)}async signOut(){const e=(0,i.v0)();await e.signOut()}async unlink(e){const t=(0,i.v0)();if(!t.currentUser)throw new Error(a.ERROR_NO_USER_SIGNED_IN);const n=await(0,i.qB)(t.currentUser,e.providerId);return{user:this.createUserResult(n)}}async updateEmail(e){const t=(0,i.v0)().currentUser;if(!t)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.s)(t,e.newEmail)}async updatePassword(e){const t=(0,i.v0)().currentUser;if(!t)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.gQ)(t,e.newPassword)}async updateProfile(e){const t=(0,i.v0)().currentUser;if(!t)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.ck)(t,e)}async useAppLanguage(){(0,i.v0)().useDeviceLanguage()}async useEmulator(e){const t=(0,i.v0)(),n=e.port||9099,r=e.scheme||"http";e.host.includes("://")?(0,i.S$)(t,`${e.host}:${n}`):(0,i.S$)(t,`${r}://${e.host}:${n}`)}handleAuthStateChange(e){const t={user:this.createUserResult(e)};this.notifyListeners(a.AUTH_STATE_CHANGE_EVENT,t)}applySignInOptions(e,t){if(e.customParameters){const n={};e.customParameters.map((e=>{n[e.key]=e.value})),t.setCustomParameters(n)}if(e.scopes)for(const n of e.scopes)t.addScope(n)}signInWithPopupOrRedirect(e,t){const n=(0,i.v0)();return"redirect"===t?(0,i.F6)(n,e):(0,i.rh)(n,e)}linkCurrentUserWithPopupOrRedirect(e,t){const n=(0,i.v0)();if(!n.currentUser)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return"redirect"===t?(0,i.WV)(n.currentUser,e):(0,i.k9)(n.currentUser,e)}linkCurrentUserWithCredential(e){const t=(0,i.v0)();if(!t.currentUser)throw new Error(a.ERROR_NO_USER_SIGNED_IN);return(0,i.ZJ)(t.currentUser,e)}createSignInResult(e,t){return{user:this.createUserResult((null===e||void 0===e?void 0:e.user)||null),credential:this.createCredentialResult(t),additionalUserInfo:this.createAdditionalUserInfoResult(e)}}createCredentialResult(e){if(!e)return null;const t={providerId:e.providerId};return e instanceof i.jh&&(t.accessToken=e.accessToken,t.idToken=e.idToken,t.secret=e.secret),t}createUserResult(e){if(!e)return null;return{displayName:e.displayName,email:e.email,emailVerified:e.emailVerified,isAnonymous:e.isAnonymous,metadata:this.createUserMetadataResult(e.metadata),phoneNumber:e.phoneNumber,photoUrl:e.photoURL,providerData:this.createUserProviderDataResult(e.providerData),providerId:e.providerId,tenantId:e.tenantId,uid:e.uid}}createUserMetadataResult(e){const t={};return e.creationTime&&(t.creationTime=Date.parse(e.creationTime)),e.lastSignInTime&&(t.lastSignInTime=Date.parse(e.lastSignInTime)),t}createUserProviderDataResult(e){return e.map((e=>({displayName:e.displayName,email:e.email,phoneNumber:e.phoneNumber,photoUrl:e.photoURL,providerId:e.providerId,uid:e.uid})))}createAdditionalUserInfoResult(e){if(!e)return null;const t=(0,i.gK)(e);if(!t)return null;const{isNewUser:n,profile:r,providerId:s,username:a}=t,o={isNewUser:n};return null!==s&&(o.providerId=s),null!==r&&(o.profile=r),null!==a&&void 0!==a&&(o.username=a),o}getErrorMessage(e){return e instanceof Object&&"message"in e&&"string"===typeof e.message?e.message:JSON.stringify(e)}}a.AUTH_STATE_CHANGE_EVENT="authStateChange",a.PHONE_CODE_SENT_EVENT="phoneCodeSent",a.PHONE_VERIFICATION_FAILED_EVENT="phoneVerificationFailed",a.ERROR_NO_USER_SIGNED_IN="No user is signed in.",a.ERROR_PHONE_NUMBER_MISSING="phoneNumber must be provided.",a.ERROR_RECAPTCHA_VERIFIER_MISSING="recaptchaVerifier must be provided and must be an instance of RecaptchaVerifier.",a.ERROR_CONFIRMATION_RESULT_MISSING="No confirmation result with this verification id was found."}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,