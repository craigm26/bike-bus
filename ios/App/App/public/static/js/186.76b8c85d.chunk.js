/*! For license information please see 186.76b8c85d.chunk.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkbike_bus=globalThis.webpackChunkbike_bus||[]).push([[186],{1186:(e,t,o)=>{o.r(t),o.d(t,{startInputShims:()=>y});var n=o(4136),i=o(3743),r=o(1811),s=o(5573);const a=new WeakMap,d=function(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];a.has(e)!==o&&(o?l(e,t,n,i):c(e,t))},l=function(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const i=t.parentNode,r=t.cloneNode(!1);r.classList.add("cloned-input"),r.tabIndex=-1,n&&(r.disabled=!0),i.appendChild(r),a.set(e,r);const s="rtl"===e.ownerDocument.dir?9999:-9999;e.style.pointerEvents="none",t.style.transform=`translate3d(${s}px,${o}px,0) scale(0)`},c=(e,t)=>{const o=a.get(e);o&&(a.delete(e),o.remove()),e.style.pointerEvents="",t.style.transform=""},u="input, textarea, [no-blur], [contenteditable]",v=(e,t,o,n)=>{const i=e.top,r=e.bottom,s=t.top,a=s+15,d=Math.min(t.bottom,n-o)-50-r,l=a-i,c=Math.round(d<0?-d:l>0?-l:0),u=Math.min(c,i-s),v=Math.abs(u)/.3;return{scrollAmount:u,scrollDuration:Math.min(400,Math.max(150,v)),scrollPadding:o,inputSafeY:4-(i-a)}},w="$ionPaddingTimer",m=(e,t,o)=>{const n=e[w];n&&clearTimeout(n),t>0?e.style.setProperty("--keyboard-offset",`${t}px`):e[w]=setTimeout((()=>{e.style.setProperty("--keyboard-offset","0px"),o&&o()}),120)},h=(e,t,o)=>{e.addEventListener("focusout",(()=>{t&&m(t,0,o)}),{once:!0})};let f=0;const b="data-ionic-skip-scroll-assist",p=e=>{document.activeElement!==e&&(e.setAttribute(b,"true"),e.focus())},g=async function(e,t,o,n,s,a){let l=arguments.length>6&&void 0!==arguments[6]&&arguments[6],c=!(arguments.length>8&&void 0!==arguments[8])||arguments[8];if(!o&&!n)return;const u=((e,t,o,n)=>{var i;const r=null!==(i=e.closest("ion-item,[ion-item]"))&&void 0!==i?i:e;return v(r.getBoundingClientRect(),t.getBoundingClientRect(),o,n)})(e,o||n,s,arguments.length>7&&void 0!==arguments[7]?arguments[7]:0);if(o&&Math.abs(u.scrollAmount)<4)return p(t),void(a&&null!==o&&(m(o,f),h(t,o,(()=>f=0))));if(d(e,t,!0,u.inputSafeY,l),p(t),(0,r.r)((()=>e.click())),a&&o&&(f=u.scrollPadding,m(o,f)),"undefined"!==typeof window){let n;const r=async()=>{void 0!==n&&clearTimeout(n),window.removeEventListener("ionKeyboardDidShow",s),window.removeEventListener("ionKeyboardDidShow",r),o&&await(0,i.c)(o,0,u.scrollAmount,u.scrollDuration),d(e,t,!1,u.inputSafeY),p(t),a&&h(t,o,(()=>f=0))},s=()=>{window.removeEventListener("ionKeyboardDidShow",s),window.addEventListener("ionKeyboardDidShow",r)};if(o){const e=await(0,i.g)(o),a=e.scrollHeight-e.clientHeight;if(c&&u.scrollAmount>a-e.scrollTop)return"password"===t.type?(u.scrollAmount+=50,window.addEventListener("ionKeyboardDidShow",s)):window.addEventListener("ionKeyboardDidShow",r),void(n=setTimeout(r,1e3))}r()}},y=async(e,t)=>{if(void 0===n.d)return;const o="ios"===t,a="android"===t,l=e.getNumber("keyboardHeight",290),c=e.getBoolean("scrollAssist",!0),v=e.getBoolean("hideCaretOnScroll",o),w=e.getBoolean("inputBlurring",o),m=e.getBoolean("scrollPadding",!0),h=Array.from(n.d.querySelectorAll("ion-input, ion-textarea")),f=new WeakMap,p=new WeakMap,y=await s.K.getResizeMode(),E=async e=>{await new Promise((t=>(0,r.c)(e,t)));const t=e.shadowRoot||e,o=t.querySelector("input")||t.querySelector("textarea"),u=(0,i.a)(e),w=u?null:e.closest("ion-footer");if(!o)return;if(u&&v&&!f.has(e)){const t=((e,t,o)=>{if(!o||!t)return()=>{};const n=o=>{var n;(n=t)===n.getRootNode().activeElement&&d(e,t,o)},i=()=>d(e,t,!1),s=()=>n(!0),a=()=>n(!1);return(0,r.a)(o,"ionScrollStart",s),(0,r.a)(o,"ionScrollEnd",a),t.addEventListener("blur",i),()=>{(0,r.b)(o,"ionScrollStart",s),(0,r.b)(o,"ionScrollEnd",a),t.removeEventListener("blur",i)}})(e,o,u);f.set(e,t)}if(!("date"===o.type||"datetime-local"===o.type)&&(u||w)&&c&&!p.has(e)){const t=function(e,t,o,i,r,a,d){let l=arguments.length>7&&void 0!==arguments[7]&&arguments[7];const c=a&&(void 0===d||d.mode===s.a.None);let u=!1;const v=void 0!==n.w?n.w.innerHeight:0,w=n=>{!1!==u?g(e,t,o,i,n.detail.keyboardHeight,c,l,v,!1):u=!0},m=()=>{u=!1,null===n.w||void 0===n.w||n.w.removeEventListener("ionKeyboardDidShow",w),e.removeEventListener("focusout",m,!0)},h=async()=>{t.hasAttribute(b)?t.removeAttribute(b):(g(e,t,o,i,r,c,l,v),null===n.w||void 0===n.w||n.w.addEventListener("ionKeyboardDidShow",w),e.addEventListener("focusout",m,!0))};return e.addEventListener("focusin",h,!0),()=>{e.removeEventListener("focusin",h,!0),null===n.w||void 0===n.w||n.w.removeEventListener("ionKeyboardDidShow",w),e.removeEventListener("focusout",m,!0)}}(e,o,u,w,l,m,y,a);p.set(e,t)}};w&&(()=>{let e=!0,t=!1;const o=document,n=()=>{t=!0},i=()=>{e=!0},s=n=>{if(t)return void(t=!1);const i=o.activeElement;if(!i)return;if(i.matches(u))return;const r=n.target;r!==i&&(r.matches(u)||r.closest(u)||(e=!1,setTimeout((()=>{e||i.blur()}),50)))};(0,r.a)(o,"ionScrollStart",n),o.addEventListener("focusin",i,!0),o.addEventListener("touchend",s,!1)})();for(const n of h)E(n);n.d.addEventListener("ionInputDidLoad",(e=>{E(e.detail)})),n.d.addEventListener("ionInputDidUnload",(e=>{(e=>{if(v){const t=f.get(e);t&&t(),f.delete(e)}if(c){const t=p.get(e);t&&t(),p.delete(e)}})(e.detail)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,