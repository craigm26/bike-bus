/*! For license information please see 738.0011a44c.chunk.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkbike_bus=globalThis.webpackChunkbike_bus||[]).push([[738],{738:(e,t,s)=>{s.r(t),s.d(t,{scopeCss:()=>B});const r="-shadowcsshost",o="-shadowcssslotted",n="-shadowcsscontext",c=")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",l=new RegExp("("+r+c,"gim"),i=new RegExp("("+n+c,"gim"),a=new RegExp("("+o+c,"gim"),p=r+"-no-combinator",h=/-shadowcsshost-no-combinator([^\s]*)/,u=[/::shadow/g,/::content/g],g=/-shadowcsshost/gim,d=e=>new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${e}\\b)`,"gim"),m=d("::slotted"),$=d(":host"),f=d(":host-context"),x=/\/\*\s*[\s\S]*?\*\//g,_=/\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g,b=/(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,w=/([{}])/g,S=/(^.*?[^\\])??((:+)(.*)|$)/,v="%BLOCK%",k=(e,t)=>{const s=E(e);let r=0;return s.escapedString.replace(b,(function(){const e=arguments.length<=2?void 0:arguments[2];let o="",n=arguments.length<=4?void 0:arguments[4],c="";n&&n.startsWith("{"+v)&&(o=s.blocks[r++],n=n.substring(8),c="{");const l=t({selector:e,content:o});return`${arguments.length<=1?void 0:arguments[1]}${l.selector}${arguments.length<=3?void 0:arguments[3]}${c}${l.content}${n}`}))},E=e=>{const t=e.split(w),s=[],r=[];let o=0,n=[];for(let c=0;c<t.length;c++){const e=t[c];"}"===e&&o--,o>0?n.push(e):(n.length>0&&(r.push(n.join("")),s.push(v),n=[]),s.push(e)),"{"===e&&o++}n.length>0&&(r.push(n.join("")),s.push(v));return{escapedString:s.join(""),blocks:r}},W=(e,t,s)=>e.replace(t,(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t[2]){const e=t[2].split(","),r=[];for(let o=0;o<e.length;o++){const n=e[o].trim();if(!n)break;r.push(s(p,n,t[3]))}return r.join(",")}return p+t[3]})),O=(e,t,s)=>e+t.replace(r,"")+s,R=(e,t,s)=>t.indexOf(r)>-1?O(e,t,s):e+t+s+", "+t+" "+e+s,j=(e,t)=>{const s=(e=>(e=e.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),new RegExp("^("+e+")([>\\s~+[.,{:][\\s\\S]*)?$","m")))(t);return!s.test(e)},T=(e,t)=>e.replace(S,(function(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"")+t+(arguments.length>3&&void 0!==arguments[3]?arguments[3]:"")+(arguments.length>4&&void 0!==arguments[4]?arguments[4]:"")})),C=(e,t,s)=>{const r="."+(t=t.replace(/\[is=([^\]]*)\]/g,(function(e){return arguments.length<=1?void 0:arguments[1]}))),o=e=>{let o=e.trim();if(!o)return"";if(e.indexOf(p)>-1)o=((e,t,s)=>{if(g.lastIndex=0,g.test(e)){const t=`.${s}`;return e.replace(h,((e,s)=>T(s,t))).replace(g,t+" ")}return t+" "+e})(e,t,s);else{const t=e.replace(g,"");t.length>0&&(o=T(t,r))}return o},n=(e=>{const t=[];let s=0;return{content:(e=e.replace(/(\[[^\]]*\])/g,((e,r)=>{const o=`__ph-${s}__`;return t.push(r),s++,o}))).replace(/(:nth-[-\w]+)(\([^)]+\))/g,((e,r,o)=>{const n=`__ph-${s}__`;return t.push(o),s++,r+n})),placeholders:t}})(e);let c,l="",i=0;const a=/( |>|\+|~(?!=))\s*/g;let u=!((e=n.content).indexOf(p)>-1);for(;null!==(c=a.exec(e));){const t=c[1],s=e.slice(i,c.index).trim();u=u||s.indexOf(p)>-1;l+=`${u?o(s):s} ${t} `,i=a.lastIndex}const d=e.substring(i);return u=u||d.indexOf(p)>-1,l+=u?o(d):d,m=n.placeholders,l.replace(/__ph-(\d+)__/g,((e,t)=>m[+t]));var m},L=(e,t,s,r,o)=>k(e,(e=>{let o=e.selector,n=e.content;"@"!==e.selector[0]?o=((e,t,s,r)=>e.split(",").map((e=>r&&e.indexOf("."+r)>-1?e.trim():j(e,t)?C(e,t,s).trim():e.trim())).join(", "))(e.selector,t,s,r):(e.selector.startsWith("@media")||e.selector.startsWith("@supports")||e.selector.startsWith("@page")||e.selector.startsWith("@document"))&&(n=L(e.content,t,s,r));return{selector:o.replace(/\s{2,}/g," ").trim(),content:n}})),y=(e,t,s,c,h)=>{const g=((e,t)=>{const s="."+t+" > ",r=[];return e=e.replace(a,(function(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];if(t[2]){const e=t[2].trim(),o=t[3],n=s+e+o;let c="";for(let s=t[4]-1;s>=0;s--){const e=t[5][s];if("}"===e||","===e)break;c=e+c}const l=(c+n).trim(),i=`${c.trimEnd()}${n.trim()}`.trim();if(l!==i){const e=`${i}, ${l}`;r.push({orgSelector:l,updatedSelector:e})}return n}return p+t[3]})),{selectors:r,cssText:e}})(e=(e=>W(e,i,R))(e=(e=>W(e,l,O))(e=(e=>e.replace(f,`$1${n}`).replace($,`$1${r}`).replace(m,`$1${o}`))(e))),c);return e=(e=>u.reduce(((e,t)=>e.replace(t," ")),e))(e=g.cssText),t&&(e=L(e,t,s,c)),{cssText:(e=(e=A(e,s)).replace(/>\s*\*\s+([^{, ]+)/gm," $1 ")).trim(),slottedSelectors:g.selectors.map((e=>({orgSelector:A(e.orgSelector,s),updatedSelector:A(e.updatedSelector,s)})))}},A=(e,t)=>e.replace(/-shadowcsshost-no-combinator/g,`.${t}`),B=(e,t,s)=>{const r=t+"-h",o=t+"-s",n=e.match(_)||[];e=(e=>e.replace(x,""))(e);const c=[];if(s){const t=e=>{const t=`/*!@___${c.length}___*/`,s=`/*!@${e.selector}*/`;return c.push({placeholder:t,comment:s}),e.selector=t+e.selector,e};e=k(e,(e=>"@"!==e.selector[0]?t(e):e.selector.startsWith("@media")||e.selector.startsWith("@supports")||e.selector.startsWith("@page")||e.selector.startsWith("@document")?(e.content=k(e.content,t),e):e))}const l=y(e,t,r,o);return e=[l.cssText,...n].join("\n"),s&&c.forEach((t=>{let{placeholder:s,comment:r}=t;e=e.replace(s,r)})),l.slottedSelectors.forEach((t=>{const s=new RegExp(t.orgSelector.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g");e=e.replace(s,t.updatedSelector)})),e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,